{"version":3,"sources":["components/Header.js","components/MessageDisplayList.js","components/MessageInputArea.js","components/MessageArea.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","useDropdownMenu","buttonProps","itemProps","isOpen","setIsOpen","className","icon","faEllipsisV","role","onClick","changeColorMode","class","MessageDisplayList","messageList","map","message","msgSentFromLoggedInUser","msgLoggedInUser","text","id","MessageInputArea","onSubmit","e","submitMessageForm","type","value","onChange","setMessages","target","MessageArea","useState","setMessageList","preventDefault","createdOn","Date","toString","length","App","state","isLightMode","bind","this","setState","prevState","console","log","colorMode","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIe,SAASA,EAAOC,GAC7B,MAAsDC,IAAgB,GAA9DC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,OAAhC,EAAwCC,UACxC,OACE,sBAAKC,UAAU,mBAAf,UACE,qBAAKA,UAAU,eAAf,oBAQA,mDAAYJ,GAAZ,IAAyBI,UAAU,yBAAnC,UACG,IACD,cAAC,IAAD,CAAiBC,KAAMC,UAEzB,sBAAKF,UAAWF,EAAS,UAAY,GAAIK,KAAK,OAA9C,UACE,6CAAON,EAAU,IAAjB,IAAqBO,QAAS,kBAAMV,EAAMW,mBAA1C,wBAGA,6CAAOR,EAAU,IAAjB,IAAqBS,MAAM,UAA3B,0BAGA,6CAAOT,EAAU,IAAjB,IAAqBO,QAAS,kBAAMV,EAAMW,mBAA1C,6B,oBC3BO,SAASE,EAAmBb,GACzC,IAAQc,EAAgBd,EAAhBc,YACR,OACE,qBAAKR,UAAU,qBAAf,SACGQ,EAAYC,KAAI,SAACC,GAChB,IAAIC,EAA0BD,EAAQE,gBAClC,OACA,WACJ,OACE,sBACEZ,UAAS,sBAAiBW,GAD5B,UAIE,wBACA,4BAAID,EAAQG,SAHPH,EAAQI,SCXV,SAASC,EAAiBrB,GACvC,OACE,uBAAMsB,SAAU,SAACC,GAAD,OAAOvB,EAAMwB,kBAAkBD,IAA/C,UACE,uBACEE,KAAK,OACLC,MAAO1B,EAAMgB,SAAW,GACxBV,UAAU,QACVqB,SAAU,SAACJ,GAAD,OAAOvB,EAAM4B,YAAYL,EAAEM,OAAOH,UAE9C,wBAAQpB,UAAU,cAAcmB,KAAK,SAArC,6BCLS,SAASK,IACtB,IAIA,EAA+BC,mBAAS,IAAxC,mBAAOf,EAAP,KAAgBY,EAAhB,KACA,EAAsCG,mBALd,CACtB,CAAEZ,KAAM,QAASC,GAAI,EAAGF,iBAAiB,GACzC,CAAEC,KAAM,KAAMC,GAAI,EAAGF,iBAAiB,KAGxC,mBAAOJ,EAAP,KAAoBkB,EAApB,KAeA,OACE,sBAAK1B,UAAU,wBAAf,UACE,cAACO,EAAD,CAAoBC,YAAaA,IACjC,cAACO,EAAD,CACEO,YAAaA,EACbJ,kBAlBoB,SAACD,GACzBA,EAAEU,iBACFD,EAAe,GAAD,mBACTlB,GADS,CAEZ,CACEK,KAAMH,EACNE,iBAAiB,EACjBgB,WAAW,IAAIC,MAAOC,WACtBhB,GAAIN,EAAYuB,OAAS,MAG7BT,EAAY,KAQRZ,QAASA,O,UCKFsB,E,kDA7Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,aAAa,EACb1B,YAAa,IAEf,EAAKH,gBAAkB,EAAKA,gBAAgB8B,KAArB,gBANX,E,mDASd,WACEC,KAAKC,UAAS,SAACC,GACb,MAAO,CAAEJ,aAAcI,EAAUJ,gBAEnCK,QAAQC,IAAI,IAAKJ,KAAKH,S,oBAGxB,WACE,IAAMQ,EAAYL,KAAKH,MAAMC,YAAc,YAAc,WACzD,OACE,qBAAKlC,UAAS,wBAAmByC,GAAjC,SACE,sBAAKzC,UAAU,iBAAf,UACE,cAACP,EAAD,CAAQY,gBAAiB+B,KAAK/B,kBAC9B,cAACmB,EAAD,a,GAvBQkB,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.11537edd.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons\";\r\nimport useDropdownMenu from \"react-accessible-dropdown-menu-hook\";\r\n\r\nexport default function Header(props) {\r\n  const { buttonProps, itemProps, isOpen, setIsOpen } = useDropdownMenu(2);\r\n  return (\r\n    <div className=\"header-container\">\r\n      <div className=\"header-title\">Chattr</div>\r\n      {/* <button\r\n        className=\"header-menu header-btn\"\r\n        onClick={() => props.changeColorMode()}\r\n      >\r\n        <FontAwesomeIcon icon={faEllipsisV} />\r\n      </button> */}\r\n\r\n      <button {...buttonProps} className=\"header-menu header-btn\">\r\n        {\" \"}\r\n        <FontAwesomeIcon icon={faEllipsisV} />\r\n      </button>\r\n      <div className={isOpen ? \"visible\" : \"\"} role=\"menu\">\r\n        <a {...itemProps[0]} onClick={() => props.changeColorMode()}>\r\n          Dark Mode\r\n        </a>\r\n        <a {...itemProps[1]} class=\"divider\">\r\n          Switch User\r\n        </a>\r\n        <a {...itemProps[1]} onClick={() => props.changeColorMode()}>\r\n          Sign Out\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function MessageDisplayList(props) {\r\n  const { messageList } = props;\r\n  return (\r\n    <div className=\"chatarea-container\">\r\n      {messageList.map((message) => {\r\n        let msgSentFromLoggedInUser = message.msgLoggedInUser\r\n          ? \"sent\"\r\n          : \"received\";\r\n        return (\r\n          <div\r\n            className={`textdisplay ${msgSentFromLoggedInUser}`}\r\n            key={message.id}\r\n          >\r\n            <img></img>\r\n            <p>{message.text}</p>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","export default function MessageInputArea(props) {\r\n  return (\r\n    <form onSubmit={(e) => props.submitMessageForm(e)}>\r\n      <input\r\n        type=\"text\"\r\n        value={props.message || \"\"}\r\n        className=\"input\"\r\n        onChange={(e) => props.setMessages(e.target.value)}\r\n      />\r\n      <button className=\"sendmsg-btn\" type=\"submit\">\r\n        ðŸ”¥\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport MessageDisplayList from \"./MessageDisplayList\";\r\nimport MessageInputArea from \"./MessageInputArea\";\r\n\r\nexport default function MessageArea() {\r\n  const messageTempList = [\r\n    { text: \"hello\", id: 1, msgLoggedInUser: false },\r\n    { text: \"hi\", id: 2, msgLoggedInUser: false },\r\n  ];\r\n  const [message, setMessages] = useState(\"\");\r\n  const [messageList, setMessageList] = useState(messageTempList);\r\n\r\n  const submitMessageForm = (e) => {\r\n    e.preventDefault();\r\n    setMessageList([\r\n      ...messageList,\r\n      {\r\n        text: message,\r\n        msgLoggedInUser: true,\r\n        createdOn: new Date().toString(),\r\n        id: messageList.length + 1,\r\n      },\r\n    ]);\r\n    setMessages(\"\");\r\n  };\r\n  return (\r\n    <div className=\"messagearea-container\">\r\n      <MessageDisplayList messageList={messageList} />\r\n      <MessageInputArea\r\n        setMessages={setMessages}\r\n        submitMessageForm={submitMessageForm}\r\n        message={message}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport MessageArea from \"./components/MessageArea\";\r\nimport React from \"react\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLightMode: false,\r\n      messageList: [],\r\n    };\r\n    this.changeColorMode = this.changeColorMode.bind(this);\r\n  }\r\n\r\n  changeColorMode() {\r\n    this.setState((prevState) => {\r\n      return { isLightMode: !prevState.isLightMode };\r\n    });\r\n    console.log(\"B\", this.state);\r\n  }\r\n\r\n  render() {\r\n    const colorMode = this.state.isLightMode ? \"lightmode\" : \"darkmode\";\r\n    return (\r\n      <div className={`app-container ${colorMode}`}>\r\n        <div className=\"main-container\">\r\n          <Header changeColorMode={this.changeColorMode} />\r\n          <MessageArea />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}