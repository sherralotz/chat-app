{"version":3,"sources":["components/logo.svg","components/Header.js","components/MessageDisplayList.js","components/MessageInputArea.js","components/MessageArea.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","useDropdownMenu","buttonProps","isOpen","className","src","logo","alt","icon","faEllipsisV","role","href","onClick","changeColorMode","value","isColorLightMode","onToggle","confirmAlert","title","message","overlayClassName","buttons","label","logoutUser","MessageDisplayList","messages","user","dummy","map","msgSentFromLoggedInUser","uid","displayName","photoURL","text","id","ref","MessageInputArea","onSubmit","e","submitMessageForm","type","onChange","setMessages","target","faPaperPlane","MessageArea","firebase","auth","useRef","messagesRef","firestore","collection","query","orderBy","limit","useCollectionData","idField","useState","a","preventDefault","trim","currentUser","add","createdAt","FieldValue","serverTimestamp","useEffect","current","scrollIntoView","behavior","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","isLightMode","setLightMode","useAuthState","SignIn","provider","GoogleAuthProvider","signInWithPopup","signOut","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd9e8e51.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d0f1ae30.svg\";","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons\";\r\nimport useDropdownMenu from \"react-accessible-dropdown-menu-hook\";\r\nimport ToggleButton from \"react-toggle-button\";\r\nimport logo from \"./logo.svg\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\n\r\nexport default function Header(props) {\r\n  const { buttonProps, isOpen } = useDropdownMenu(2);\r\n\r\n  const confirmSignOut = () => {\r\n    confirmAlert({\r\n      title: \"Logout\",\r\n      message: \"Are you sure you want to log out?\",\r\n      overlayClassName: props.isColorLightMode ? \"\" : \"darkmode\",\r\n      buttons: [\r\n        {\r\n          label: \"Log Out\",\r\n          onClick: () => {\r\n            props.logoutUser();\r\n          },\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          onClick: () => {},\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"header-container\">\r\n      <div className=\"header-title\">\r\n        <img src={logo} alt=\"App logo\" />\r\n      </div>\r\n\r\n      <button {...buttonProps} className=\"header-menu header-btn\">\r\n        <FontAwesomeIcon icon={faEllipsisV} />\r\n      </button>\r\n      <div className={isOpen ? \"visible\" : \"\"} role=\"menu\">\r\n        <a href=\"#\" onClick={() => props.changeColorMode()}>\r\n          Dark Mode\r\n          <div className=\"menuoption\">\r\n            <ToggleButton\r\n              value={!props.isColorLightMode}\r\n              onToggle={() => props.changeColorMode()}\r\n            />\r\n          </div>\r\n        </a>\r\n        <div className=\"divider\"></div>\r\n        <a\r\n          href=\"#\"\r\n          onClick={() => {\r\n            confirmSignOut();\r\n          }}\r\n        >\r\n          Sign Out\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function MessageDisplayList(props) {\r\n  const { messages, user, dummy } = props;\r\n\r\n  return (\r\n    <div className=\"chatarea-container\">\r\n      {messages &&\r\n        messages.map((message) => {\r\n          let msgSentFromLoggedInUser =\r\n            message.uid === user.uid ? \"sent\" : \"received\";\r\n          return (\r\n            <div\r\n              className={`textdisplay ${msgSentFromLoggedInUser}`}\r\n              key={message.id}\r\n            >\r\n              <img\r\n                title={message.displayName}\r\n                className=\"userimg\"\r\n                alt=\"User face\"\r\n                src={message.photoURL}\r\n              ></img>\r\n              <p>{message.text}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      <span ref={dummy}></span>\r\n    </div>\r\n  );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function MessageInputArea(props) {\r\n  return (\r\n    <form onSubmit={(e) => props.submitMessageForm(e)}>\r\n      <input\r\n        type=\"text\"\r\n        value={props.message || \"\"}\r\n        className=\"input\"\r\n        onChange={(e) => props.setMessages(e.target.value)}\r\n      />\r\n      <button className=\"sendmsg-btn primary-btn\" type=\"submit\">\r\n        <FontAwesomeIcon icon={faPaperPlane} />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport MessageDisplayList from \"./MessageDisplayList\";\r\nimport MessageInputArea from \"./MessageInputArea\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\n\r\nexport default function MessageArea(props) {\r\n  const { user, firebase, auth } = props;\r\n  const dummy = useRef();\r\n  const messagesRef = firebase.firestore().collection(\"messages\");\r\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\r\n  const [messages] = useCollectionData(query, { idField: \"id\" });\r\n\r\n  const [message, setMessages] = useState(\"\");\r\n  // const [messageList, setMessageList] = useState(messages ? messages : []);\r\n  const submitMessageForm = async (e) => {\r\n    e.preventDefault();\r\n    if (message.trim()) {\r\n      const { uid, photoURL, displayName } = auth.currentUser;\r\n\r\n      await messagesRef.add({\r\n        text: message,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        displayName,\r\n        photoURL,\r\n      });\r\n      setMessages(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div>\r\n      <MessageDisplayList\r\n        messages={messages}\r\n        dummy={dummy}\r\n        user={user}\r\n        firebase={firebase}\r\n      />\r\n\r\n      <MessageInputArea\r\n        setMessages={setMessages}\r\n        submitMessageForm={submitMessageForm}\r\n        message={message}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport MessageArea from \"./components/MessageArea\";\r\nimport React, { useState } from \"react\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\n// import { useCollectionData } from \"react-firebase-hooks/firestore\";\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp({\r\n    apiKey: \"AIzaSyAx06l-RknTDjie9ZUV0KnE3pjS2XhiSsI\",\r\n    authDomain: \"superchat-f2723.firebaseapp.com\",\r\n    projectId: \"superchat-f2723\",\r\n    storageBucket: \"superchat-f2723.appspot.com\",\r\n    messagingSenderId: \"1081454007055\",\r\n    appId: \"1:1081454007055:web:aa5339b4a6ea91e9dfa47a\",\r\n    measurementId: \"G-YSB98DSPQQ\",\r\n  });\r\n} else {\r\n  firebase.app();\r\n}\r\n\r\nconst auth = firebase.auth();\r\n\r\nexport default function App() {\r\n  const [isLightMode, setLightMode] = useState(false);\r\n  const [user] = useAuthState(auth);\r\n\r\n  //console.log(user);\r\n  const isColorLightMode = isLightMode ? \"lightmode\" : \"darkmode\";\r\n  const logoutUser = () => {\r\n    firebase.auth().signOut();\r\n  };\r\n  function SignIn() {\r\n    const signInWithGoogle = () => {\r\n      const provider = new firebase.auth.GoogleAuthProvider();\r\n      auth.signInWithPopup(provider);\r\n    };\r\n    return (\r\n      <button className=\"signin-btn primary-btn\" onClick={signInWithGoogle}>\r\n        Sign in with Google\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`app-container ${isColorLightMode}`}>\r\n      <div className=\"main-container\">\r\n        <Header\r\n          changeColorMode={() => {\r\n            setLightMode(!isLightMode);\r\n          }}\r\n          logoutUser={logoutUser}\r\n          isColorLightMode={isLightMode}\r\n        />\r\n        <div className=\"messagearea-container\">\r\n          {user ? (\r\n            <MessageArea auth={auth} user={user} firebase={firebase} />\r\n          ) : (\r\n            <SignIn />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}